name: "Publish images"

on:
  workflow_call:

permissions:
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  publish_images:
    name: 'Publish module images'
    runs-on: ubuntu-latest
    env:
      REPOBASE: ghcr.io/${{ github.repository_owner }}
      IMAGETAG: ${{ github.ref_name }}
    outputs:
      images_digest_json: ${{ env.IMAGES_DIGEST_JSON }} 
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: "yarn-${{ hashFiles('ui/yarn.lock') }}"
      - id: build
        run: |
          # Build the module images
          REPOBASE=${REPOBASE,,}
          export REPOBASE
          bash build-images.sh
      - id: publish
        run: |
          # Publish the branch
          trap 'buildah logout ghcr.io' EXIT
          buildah login -u ${{ github.actor }} --password-stdin ghcr.io <<<"${{ secrets.GITHUB_TOKEN }}"
          images=(${{ steps.build.outputs.images }})
          urls=""
          for image in "${images[@]}" ; do
            buildah push $image docker://${image}:${IMAGETAG:?}
            if [[ "${IMAGETAG}" == "main" || "${IMAGETAG}" == "master" ]]; then
                buildah push $image docker://${image}:latest
            fi
            urls="${image}:${IMAGETAG} "$'\n'"${urls}"
          done
          echo "::notice title=Image URLs::${urls}"
      - id: digests
        run: |
          images="${{ steps.build.outputs.images }}"
          images_urls=$(echo -n $images | jq -cr -R -s --arg tag "$IMAGETAG" 'split(" ") | map(. + ":" + $tag)')
          jq_filter='[.[] | select(.names != null and (.names | any(. == $names[]))) | {name: (.names[] | sub(":[^:]+$"; "")), digest}]'
          images_digest_json=$(buildah images --json | jq -rc --argjson names "$images_urls" "$jq_filter")
          echo IMAGES_DIGEST_JSON=$images_digest_json" >> >> $GITHUB_ENV
  gh_attestations:
    needs: publish_images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.publish_images.outputs.images_digest_json) }}
    steps:
      - name: Display image details
        run: |
          echo "Processing image: ${{ matrix.image.name }}"
          echo "Digest: ${{ matrix.image.digest }}"
