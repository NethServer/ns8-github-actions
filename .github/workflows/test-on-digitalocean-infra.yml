name: "Setup NS8 clusters on DigitalOcean and test module"

on:
  workflow_call:
    inputs:
      script:
        required: false
        description: "Name of the script to execute"
        type: string
        default: test-module.sh
      path:
        required: false
        type: string
        description: "Name of the script to execute, default `test-module.sh`"
      args:
        required: false
        type: string
        description: "Path where is located the script"
      repo_ref:
        required: false
        type: string
        default: ${{ github.sha }}
        description: "Additional arguments to pass to the script"
      debug_shell:
        required: false
        type: boolean
        default: false
        description: "Obtain a debug shell via https://tmate.io/"
      coremodules:
        required: false
        type: string
        description: "List of space-separated module URL to pull and use during the NS8 installation process"
      corebranch:
        required: false
        type: string
        default: ns8-stable
        description: "Branch/tag of the `ns8-core` repository from where to get the installation script"
      setup_cluster:
        required: false
        type: boolean
        default: true
        description: "If true the workflow will install and setup a NS8 cluster"
      leader_nodes:
        required: false
        type: string
        default: "cs1 dn1 rl1"
        description: "List of space-separated leader nodes to create"
      do_project:
        required: false
        type: string
        default: "NS8-CI"
        description: "DigitalOcean project where to create the droplets"
      do_domain:
        required: false
        type: string
        default: "ci.nethserver.net"
        description: "DigitalOcean domain where to create the DNS records"
    secrets:
      do_token:
        required: true
        description: "DigitalOcean token to use for create the infrastructure"
env:
  TF_VAR_project: ${{ inputs.do_project }}
  TF_VAR_domain: ${{ inputs.do_domain }}


jobs:
  info:
    name: "Find NS8 cluster informations"
    runs-on: ubuntu-latest
    outputs:
      nodes: ${{ steps.nodes.outputs.list }}
      short_sha: ${{ steps.short_sha.outputs.value }}
    steps:
      - name: "Create the list of leader nodes"
        id: nodes
        run: |
          nodes=$(jq -ncR '[inputs]' <<< "$(echo ${{ inputs.leader_nodes }} | tr ' ' '\n')")
          echo "list=${nodes}" >> $GITHUB_OUTPUT
      - name: "Get the short sha of the current commit"
        id: short_sha
        run: echo "value=$( echo ${{ inputs.repo_ref }} | cut -c1-8 )" >> $GITHUB_OUTPUT
  test-module:
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch || github.ref_name }}-${{ matrix.node }}
      cancel-in-progress: true
    name: "Test on DigitalOcean"
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
          node: ${{ fromJSON(needs.info.outputs.nodes) }}
    steps:
      - name: "Checkout the module repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.repo_ref }}
          path: module
      - name: "Checkout the infrastructure repository"
        uses: actions/checkout@v3
        with:
          repository: NethServer/ns8-terraform-infra
          path: infra
      - name: "HashiCorp - Setup Terraform"
        id: tf_setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: "HashiCorp - Terraform Apply"
        if: ${{ steps.tf_setup.outcome == 'success' && always() }}
        env:
          TF_VAR_do_token: ${{ secrets.do_token }}
        run: |
          sleep 60s
          terraform init
          terraform workspace new ${{ matrix.node }}-${{ needs.info.outputs.short_sha }}
          terraform apply -var 'leader_node={"${{ matrix.node }}":"ams3"}' -auto-approve
        working-directory: ${{ github.workspace }}/infra
      - name: "HashiCorp - Terraform Output Deploy Key"
        run: |
          terraform output -raw deploy-key > ${{ github.workspace }}/key
          chmod 700 ${{ github.workspace }}/key
        working-directory: ${{ github.workspace }}/infra
      - name: "Wait for SSH server do be READY"
        run: |
          for (( c=1; c<=20; c++ )); do
          set +e
            ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -i ${{ github.workspace }}/key \
              root@${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }} true
            if [ "$?" = "0" ]; then exit 0; fi
            sleep 1
          done
          exit 1
      - name: "Wait for boot to complete"
        run: |
          ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -i ${{ github.workspace }}/key \
            root@${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }} \
            'systemctl is-system-running --wait || : '
      - name: "Install NS8 system"
        if: inputs.setup_cluster
        run: |
          ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -i ${{ github.workspace }}/key \
          root@${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }} << EOF
            set -e -x
            curl -O https://raw.githubusercontent.com/NethServer/ns8-core/${{ inputs.corebranch }}/core/install.sh
            bash install.sh ${{ inputs.coremodules }}
          EOF
      - name: "Create NS8 Cluster"
        if: inputs.setup_cluster
        run: |
          ssh -o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -i ${{ github.workspace }}/key \
          root@${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }} << EOF
            set -e -x
            create-cluster ${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }}:55820 10.5.4.0/24 Nethesis,1234
          EOF
      - name: "Run tests"
        run: |
          ./${{ inputs.script }} ${{ matrix.node }}.leader.${{ matrix.node }}-${{ needs.info.outputs.short_sha }}.${{ env.TF_VAR_domain }} ${{ inputs.args }}
        working-directory: ${{ github.workspace }}/module/${{ inputs.path }}
        env:
          SSH_KEYFILE: ${{ github.workspace }}/key
          COREMODULES: ${{ inputs.coremodules }}
      - name: "Save tests results"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: tests-logs-${{ matrix.node }}
          path: |
             ${{ github.workspace }}/module/${{ inputs.path }}/tests/outputs/
      - name: "Debugging with tmate"
        if: ${{ inputs.debug_shell == true && ! cancelled() && always() }}
        uses: mxschmitt/action-tmate@v3
      - name: "HashiCorp - Terraform Destroy"
        if: ${{ always() }}
        env:
          TF_VAR_do_token: ${{ secrets.do_token }}
        run: terraform apply -destroy -auto-approve
        working-directory: ${{ github.workspace }}/infra
